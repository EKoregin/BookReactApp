cache:
  key: ${CI_COMMIT_REF_SLUG}  # Уникальный ключ для ветки
  paths:
    - .m2/repository/  # Путь к локальному репозиторию Maven

stages:
  - build
#  - lint
#  - test
  - package
  - docker
  - deploy

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  MAVEN_CLI_OPTS: "-B -DskipTests"
  APP_NAME: "bookreactapp"
  APP_DOCKER_NAME: $DOCKERHUB_USERNAME/$APP_NAME:$CI_COMMIT_SHORT_SHA
  REMOTE_USER: mnemonic
  DEPLOY_HOST: 192.168.1.87
  REMOTE_PROJECT_PATH: /home/mnemonic/projects/bookreactapp/docker-compose.yml

build:
  stage: build
  image: maven:3.9.4-eclipse-temurin-17
  script:
#    - mvn $MAVEN_CLI_OPTS dependency:go-offline
    - mvn $MAVEN_CLI_OPTS clean compile
  artifacts:
    paths:
      - target/
    expire_in: 1 week
  only:
    - dev
  tags:
    - docker

## Проверка синтаксиса Java-кода с Checkstyle
#java_lint:
#  stage: lint
#  image: maven:3.9.4-eclipse-temurin-17
#  script:
#    - echo "Проверка синтаксиса Java с Checkstyle..."
#    - mvn $MAVEN_CLI_OPTS checkstyle:check
#  artifacts:
#    when: always
#    paths:
#      - target/checkstyle-result.xml
#    expire_in: 1 week
#  tags:
#    - docker
#  only:
#    - dev
#
## Запускаем только при пуше в ветку main
#maven_test:
#  stage: test
#  image: maven:3.9.4-eclipse-temurin-17
#  script:
#    - echo "Running tests..."
#    - mvn clean test -Dtest=!ru.korevg.bookreactapp.it.BookItTest
#  only:
#    - dev
#  tags:
#    - maven
#
package:
  stage: package
  image: maven:3.9.4-eclipse-temurin-17
  script:
    - mvn package -DskipTests
  artifacts:
    paths:
      - target/*.jar
  only:
    - dev

docker:
  stage: docker
  image: docker:28.1.1
  services:
    - docker:28.1.1-dind
  variables:
    DOCKER_HOST: "unix:///runner/services/docker/docker.sock"
  before_script:
    - docker info
    - echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
  script:
    - echo "Create docker image and push to dockerhub..."
    - docker build -t $APP_DOCKER_NAME .
    - docker push $APP_DOCKER_NAME
  only:
    - dev

# Деплой (например, на тестовый стенд)
deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519
    - ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
  script:
    - ssh $REMOTE_USER@$DEPLOY_HOST "export APP_TAG=$CI_COMMIT_SHORT_SHA && docker compose -f $REMOTE_PROJECT_PATH pull $APP_NAME && docker compose -f $REMOTE_PROJECT_PATH up -d --no-deps $APP_NAME"
#    - ssh $REMOTE_USER@$DEPLOY_HOST "export APP_TAG=$CI_COMMIT_SHORT_SHA"
#    - ssh $REMOTE_USER@$DEPLOY_HOST "docker compose -f $REMOTE_PROJECT_PATH pull $APP_NAME"
#    - ssh $REMOTE_USER@$DEPLOY_HOST "docker compose -f $REMOTE_PROJECT_PATH up -d --no-deps $APP_NAME"
